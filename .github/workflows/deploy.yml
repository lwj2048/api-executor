name: API管理系统测试与部署

on:
  push:
    branches: [ main, master ]
  pull_request:
    branches: [ main, master ]
  workflow_dispatch:

env:
  PYTHON_VERSION: '3.9'
  NODE_VERSION: '18'

jobs:
  test:
    name: 功能测试
    runs-on: ubuntu-latest
    
    services:
      postgres:
        image: postgres:14
        env:
          POSTGRES_DB: api_test
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: testpass123
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    steps:
    - name: 📦 检出代码
      uses: actions/checkout@v4

    - name: 🐍 设置Python环境
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}

    - name: 📋 安装依赖
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pytest httpx pytest-asyncio

    - name: 🗄️ 等待数据库就绪
      run: |
        echo "等待PostgreSQL启动..."
        for i in {1..30}; do
          if pg_isready -h localhost -p 5432 -U postgres; then
            echo "✅ PostgreSQL已就绪"
            break
          fi
          echo "等待中... ($i/30)"
          sleep 2
        done

    - name: 🔧 配置环境变量
      run: |
        echo "SUPABASE_URL=postgresql://postgres:testpass123@localhost:5432/api_test" >> $GITHUB_ENV
        echo "SECRET_KEY=test-secret-key-for-github-actions-very-long-and-secure" >> $GITHUB_ENV
        echo "ADMIN_USERNAME=admin" >> $GITHUB_ENV
        echo "ADMIN_PASSWORD=admin123" >> $GITHUB_ENV
        echo "DEBUG=true" >> $GITHUB_ENV
        echo "HOST=127.0.0.1" >> $GITHUB_ENV
        echo "PORT=8080" >> $GITHUB_ENV

    - name: 🏗️ 创建测试脚本
      run: |
        cat > test_api.py << 'EOF'
        import httpx
        import asyncio
        import json
        import time
        import sys
        from urllib.parse import urlencode

        async def test_api_system():
            """测试API系统的主要功能"""
            base_url = "http://127.0.0.1:8080"
            
            # 等待服务启动
            print("🔄 等待API服务启动...")
            for i in range(30):
                try:
                    async with httpx.AsyncClient(timeout=10) as client:
                        response = await client.get(f"{base_url}/health")
                        if response.status_code == 200:
                            print("✅ API服务已启动")
                            break
                except:
                    pass
                await asyncio.sleep(2)
            else:
                print("❌ API服务启动失败")
                return False

            async with httpx.AsyncClient(timeout=30) as client:
                # 测试1: 健康检查
                print("\n🏥 测试健康检查...")
                response = await client.get(f"{base_url}/health")
                assert response.status_code == 200
                health_data = response.json()
                assert health_data["status"] == "ok"
                print("✅ 健康检查通过")

                # 测试2: 访问登录页面
                print("\n🔐 测试登录页面...")
                response = await client.get(f"{base_url}/login")
                assert response.status_code == 200
                print("✅ 登录页面访问正常")

                # 测试3: 用户登录
                print("\n👤 测试用户登录...")
                login_data = {
                    "username": "admin",
                    "password": "admin123"
                }
                response = await client.post(f"{base_url}/login", data=login_data)
                assert response.status_code == 200
                login_result = response.json()
                assert login_result["success"] is True
                
                # 获取session cookie
                session_cookie = response.cookies.get("session_id")
                assert session_cookie is not None
                print("✅ 用户登录成功")

                # 设置认证cookie
                client.cookies.set("session_id", session_cookie)

                # 测试4: 访问主页
                print("\n🏠 测试主页访问...")
                response = await client.get(f"{base_url}/")
                assert response.status_code == 200
                print("✅ 主页访问正常")

                # 测试5: 创建API定义
                print("\n📝 测试创建API定义...")
                api_data = {
                    "name": "测试API",
                    "description": "这是一个测试API",
                    "endpoint_path": "/test/hello",
                    "action_type": "shell",
                    "action_content": "echo 'Hello from API Test'",
                    "parameters": "{}",
                    "enable_logging": "true"
                }
                response = await client.post(f"{base_url}/api/definitions", data=api_data)
                assert response.status_code == 200
                create_result = response.json()
                assert create_result["success"] is True
                api_key = create_result["api_key"]
                print(f"✅ API定义创建成功，API Key: {api_key[:10]}...")

                # 测试6: 获取API定义列表
                print("\n📋 测试获取API定义列表...")
                response = await client.get(f"{base_url}/api/definitions")
                assert response.status_code == 200
                api_list = response.json()
                assert len(api_list) > 0
                assert api_list[0]["name"] == "测试API"
                print("✅ API定义列表获取成功")

                # 测试7: 执行API
                print("\n🚀 测试API执行...")
                response = await client.get(f"{base_url}/execute?key={api_key}")
                assert response.status_code == 200
                exec_result = response.json()
                assert exec_result["success"] is True
                assert "Hello from API Test" in exec_result["result"]
                print("✅ API执行成功")

                # 测试8: 获取执行统计
                print("\n📊 测试获取执行统计...")
                response = await client.get(f"{base_url}/api/stats")
                assert response.status_code == 200
                stats = response.json()
                assert stats["total_apis"] > 0
                assert stats["total_executions"] > 0
                print("✅ 执行统计获取成功")

                print("\n🎉 所有测试通过！")
                return True

        if __name__ == "__main__":
            try:
                result = asyncio.run(test_api_system())
                if result:
                    print("\n✅ API系统测试完成 - 所有功能正常")
                    sys.exit(0)
                else:
                    print("\n❌ API系统测试失败")
                    sys.exit(1)
            except Exception as e:
                print(f"\n❌ 测试过程中发生错误: {e}")
                sys.exit(1)
        EOF

    - name: 🏃 启动API服务
      run: |
        echo "🚀 启动API服务..."
        python main.py --port 8080 --host 127.0.0.1 &
        API_PID=$!
        echo "API_PID=$API_PID" >> $GITHUB_ENV
        echo "✅ API服务已启动 (PID: $API_PID)"

    - name: 🧪 运行功能测试
      run: |
        echo "🧪 开始运行功能测试..."
        python test_api.py

    - name: 🛑 停止API服务
      if: always()
      run: |
        if [ ! -z "$API_PID" ]; then
          echo "🛑 停止API服务 (PID: $API_PID)"
          kill $API_PID || true
        fi

  docker-test:
    name: Docker测试
    runs-on: ubuntu-latest
    needs: test

    steps:
    - name: 📦 检出代码
      uses: actions/checkout@v4

    - name: 🐳 设置Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: 🏗️ 构建Docker镜像
      run: |
        echo "🏗️ 构建Docker镜像..."
        docker build -t api-management-test:latest .
        echo "✅ Docker镜像构建完成"

    - name: 🗄️ 启动PostgreSQL容器
      run: |
        echo "🗄️ 启动PostgreSQL容器..."
        docker run -d \
          --name postgres-test \
          -e POSTGRES_DB=api_test \
          -e POSTGRES_USER=postgres \
          -e POSTGRES_PASSWORD=testpass123 \
          -p 5432:5432 \
          postgres:14
        
        echo "⏳ 等待PostgreSQL启动..."
        for i in {1..30}; do
          if docker exec postgres-test pg_isready -U postgres; then
            echo "✅ PostgreSQL已就绪"
            break
          fi
          echo "等待中... ($i/30)"
          sleep 2
        done

    - name: 🚀 运行API容器
      run: |
        echo "🚀 启动API管理系统容器..."
        docker run -d \
          --name api-management-test \
          --link postgres-test:postgres \
          -p 8080:8080 \
          -e SUPABASE_URL="postgresql://postgres:testpass123@postgres:5432/api_test" \
          -e SECRET_KEY="test-secret-key-for-docker-test-very-long-and-secure" \
          -e ADMIN_USERNAME="admin" \
          -e ADMIN_PASSWORD="admin123" \
          -e DEBUG="true" \
          -e HOST="0.0.0.0" \
          -e PORT="8080" \
          api-management-test:latest
        
        echo "⏳ 等待API服务启动..."
        for i in {1..60}; do
          if curl -f http://localhost:8080/health > /dev/null 2>&1; then
            echo "✅ API服务已就绪"
            break
          fi
          echo "等待中... ($i/60)"
          sleep 2
        done

    - name: 🧪 测试Docker部署
      run: |
        echo "🧪 测试Docker部署的API功能..."
        
        # 测试健康检查
        echo "🏥 测试健康检查..."
        response=$(curl -s http://localhost:8080/health)
        echo "健康检查响应: $response"
        if echo "$response" | grep -q '"status":"ok"'; then
          echo "✅ 健康检查通过"
        else
          echo "❌ 健康检查失败"
          exit 1
        fi
        
        # 测试登录页面
        echo "🔐 测试登录页面..."
        if curl -f -s http://localhost:8080/login > /dev/null; then
          echo "✅ 登录页面访问正常"
        else
          echo "❌ 登录页面访问失败"
          exit 1
        fi
        
        # 测试用户登录
        echo "👤 测试用户登录..."
        login_response=$(curl -s -c cookies.txt -X POST \
          -d "username=admin&password=admin123" \
          http://localhost:8080/login)
        
        if echo "$login_response" | grep -q '"success":true'; then
          echo "✅ 用户登录成功"
        else
          echo "❌ 用户登录失败: $login_response"
          exit 1
        fi
        
        # 测试API定义创建
        echo "📝 测试API定义创建..."
        create_response=$(curl -s -b cookies.txt -X POST \
          -d "name=Docker测试API&description=Docker环境测试&endpoint_path=/docker/test&action_type=shell&action_content=echo 'Docker test success'&parameters={}&enable_logging=true" \
          http://localhost:8080/api/definitions)
        
        if echo "$create_response" | grep -q '"success":true'; then
          echo "✅ API定义创建成功"
          api_key=$(echo "$create_response" | grep -o '"api_key":"[^"]*"' | cut -d'"' -f4)
          echo "API Key: ${api_key:0:10}..."
        else
          echo "❌ API定义创建失败: $create_response"
          exit 1
        fi
        
        # 测试API执行
        echo "🚀 测试API执行..."
        exec_response=$(curl -s "http://localhost:8080/execute?key=$api_key")
        
        if echo "$exec_response" | grep -q '"success":true' && echo "$exec_response" | grep -q "Docker test success"; then
          echo "✅ API执行成功"
        else
          echo "❌ API执行失败: $exec_response"
          exit 1
        fi
        
        echo "🎉 Docker部署测试完成 - 所有功能正常！"

    - name: 📋 查看容器日志
      if: always()
      run: |
        echo "📋 API容器日志:"
        docker logs api-management-test || true
        echo "📋 PostgreSQL容器日志:"
        docker logs postgres-test || true

    - name: 🧹 清理容器
      if: always()
      run: |
        echo "🧹 清理测试容器..."
        docker stop api-management-test postgres-test || true
        docker rm api-management-test postgres-test || true

  deploy-summary:
    name: 部署总结
    runs-on: ubuntu-latest
    needs: [test, docker-test]
    if: always()

    steps:
    - name: 📊 部署总结
      run: |
        echo "🎯 API管理系统测试结果总结"
        echo "================================"
        echo "🧪 功能测试: ${{ needs.test.result }}"
        echo "🐳 Docker测试: ${{ needs.docker-test.result }}"
        echo ""
        
        if [ "${{ needs.test.result }}" == "success" ] && [ "${{ needs.docker-test.result }}" == "success" ]; then
          echo "🎉 所有测试通过！系统可以正常部署。"
          echo "✅ 功能完整性验证通过"
          echo "✅ Docker化部署验证通过"
          echo "✅ 数据库连接验证通过"
          echo "✅ API执行验证通过"
        else
          echo "❌ 部分测试失败，请检查上述输出。"
          exit 1
        fi 