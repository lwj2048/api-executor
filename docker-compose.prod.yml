version: '3.8'

# 生产环境Docker Compose配置 - 支持HTTPS
services:
  # 数据库
  postgres:
    image: postgres:15-alpine
    environment:
      POSTGRES_DB: ${POSTGRES_DB:-api_management}
      POSTGRES_USER: ${POSTGRES_USER:-api_user}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-your_secure_password}
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./init.sql:/docker-entrypoint-initdb.d/init.sql:ro
    restart: unless-stopped
    networks:
      - api-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-api_user}"]
      interval: 30s
      timeout: 10s
      retries: 3

  # API应用程序
  api:
    build:
      context: .
      dockerfile: Dockerfile
    environment:
      # 数据库配置
      SUPABASE_URL: postgresql://${POSTGRES_USER:-api_user}:${POSTGRES_PASSWORD:-your_secure_password}@postgres:5432/${POSTGRES_DB:-api_management}
      SECRET_KEY: ${SECRET_KEY:-your-super-secret-key-change-in-production}
      
      # 管理员账户
      ADMIN_USERNAME: ${ADMIN_USERNAME:-admin}
      ADMIN_PASSWORD: ${ADMIN_PASSWORD:-admin123}
      
      # 服务器配置
      HOST: 0.0.0.0
      PORT: 8080
      DEBUG: false
      
      # SSL配置
      DOMAIN: ${DOMAIN:-api.test.dpdns.org}
      ENABLE_HTTPS: false  # nginx处理HTTPS
      CERT_EMAIL: ${CERT_EMAIL:-admin@example.com}
      SSL_CERT_PATH: /home/ssl/letsencrypt/live
    volumes:
      - ./app.log:/app/app.log
      - ${HOME}/.ssl/letsencrypt:/home/ssl/letsencrypt  # 用户目录证书映射
    depends_on:
      postgres:
        condition: service_healthy
    restart: unless-stopped
    networks:
      - api-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Nginx反向代理 - 处理HTTPS
  nginx:
    image: nginx:alpine
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/conf.d:/etc/nginx/conf.d:ro
      - ${HOME}/.ssl/letsencrypt:/home/ssl/letsencrypt:ro  # 用户目录证书只读访问
      - ./nginx/html:/usr/share/nginx/html:ro
    depends_on:
      - api
    restart: unless-stopped
    networks:
      - api-network
    environment:
      - DOMAIN=${DOMAIN:-api.test.dpdns.org}
    healthcheck:
      test: ["CMD", "nginx", "-t"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Let's Encrypt证书管理
  certbot:
    image: certbot/certbot
    volumes:
      - ${HOME}/.ssl/letsencrypt:/etc/letsencrypt
      - ./nginx/html:/var/www/html
    environment:
      - DOMAIN=${DOMAIN:-api.test.dpdns.org}
      - CERT_EMAIL=${CERT_EMAIL:-admin@example.com}
    command: >
      sh -c "
        # 设置证书目录权限（避免root权限问题）
        mkdir -p /etc/letsencrypt/live
        chown -R $(id -u):$(id -g) /etc/letsencrypt 2>/dev/null || true
        
        if [ ! -f /etc/letsencrypt/live/${DOMAIN}/fullchain.pem ]; then
          echo '申请SSL证书...'
          certbot certonly --webroot -w /var/www/html -d ${DOMAIN} --email ${CERT_EMAIL} --agree-tos --non-interactive --staple-ocsp
        else
          echo '证书已存在，跳过申请'
        fi
      "
    depends_on:
      - nginx
    networks:
      - api-network

  # 证书自动更新任务
  certbot-renewal:
    image: certbot/certbot
    volumes:
      - ${HOME}/.ssl/letsencrypt:/etc/letsencrypt
      - ./nginx/html:/var/www/html
    environment:
      - DOMAIN=${DOMAIN:-api.test.dpdns.org}
    command: >
      sh -c "
        trap exit TERM
        while :; do
          echo '检查证书更新...'
          certbot renew --quiet --webroot -w /var/www/html --post-hook 'touch /etc/letsencrypt/reload-nginx'
          sleep 12h & wait $$!
        done
      "
    restart: unless-stopped
    depends_on:
      - certbot
    networks:
      - api-network

  # nginx配置重载监控
  nginx-reload:
    image: nginx:alpine
    volumes:
      - ${HOME}/.ssl/letsencrypt:/home/ssl/letsencrypt:ro
    command: >
      sh -c "
        trap exit TERM
        while :; do
          if [ -f /home/ssl/letsencrypt/reload-nginx ]; then
            echo '检测到证书更新，重新加载nginx...'
            docker-compose exec nginx nginx -s reload
            rm -f /home/ssl/letsencrypt/reload-nginx
          fi
          sleep 1m & wait $$!
        done
      "
    restart: unless-stopped
    depends_on:
      - nginx
    networks:
      - api-network

# 网络配置
networks:
  api-network:
    driver: bridge

# 数据卷
volumes:
  postgres_data:
    driver: local 